import pandas as pd
from nltk.sentiment.vader import SentimentIntensityAnalyzer
import nltk

def calculate_news_analysis_moving_avg(file_path, model_name):
    """
    Calculates the daily average and 20-day moving average of scores generated by a specified analysis model
    (e.g., Twitter RoBERTa) over a dataset of news articles. This function is used within the dashboard to
    visualize the sentiment analysis results from VADER, Twitter RoBERTa, and DistilRoberta models, as well as
    the natural language inference results from the BART Large MNLI model.

    The resulting DataFrame serves as the input for other functions that plot these results, enabling
    visual representation of sentiment trends over time for the sentiment analysis models, and inferred
    impacts on stock prices for the BART Large MNLI model.

    Parameters:
        file_path (str): Path to the CSV file containing the news data.
        model_name (str): The name of the analysis model being used (e.g., 'VADER Sentiment', 'Twitter RoBERTa Sentiment').

    Returns:
        pd.DataFrame: A DataFrame containing the daily average scores and the 20-day moving average for the specified model.
    """
    # Load the data from the CSV file
    df = pd.read_csv(file_path)

    # If using VADER, calculate sentiment scores based on headlines
    if model_name == 'VADER Sentiment':
        # Download VADER lexicon if not already downloaded
        nltk.download('vader_lexicon', quiet=True)
        vader = SentimentIntensityAnalyzer()

        # Calculate the positive and negative sentiment scores for each headline
        df['Positive Score'] = df['Headline'].apply(lambda title: vader.polarity_scores(title)['pos'])
        df['Negative Score'] = df['Headline'].apply(lambda title: vader.polarity_scores(title)['neg'])

        # Calculate the VADER Sentiment Score by subtracting the negative score from the positive score
        df[f'{model_name} Score'] = df['Positive Score'] - df['Negative Score']

    # Convert the 'DateTime' column to datetime format
    df['DateTime'] = pd.to_datetime(df['DateTime'])

    # Calculate the daily average sentiment score
    df_daily_avg = df.groupby(df['DateTime'].dt.date)[f'{model_name} Score'].mean().reset_index()
    df_daily_avg.columns = ['Date', f'Daily Average {model_name} Score']

    # Convert the Date column back to datetime format
    df_daily_avg['Date'] = pd.to_datetime(df_daily_avg['Date'])

    # Calculate the moving average with a window size of 20 days
    df_daily_avg['20-Day Moving Average'] = df_daily_avg[f'Daily Average {model_name} Score'].rolling(window=20).mean()

    return df_daily_avg